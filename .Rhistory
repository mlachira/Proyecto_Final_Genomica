core.taxa.standard <- core_members(pseq.rel, detection = 0, prevalence = 50/100)
pseq.core <- core(pseq.rel, detection = 0, prevalence = .5)
pseq.core2 <- aggregate_rare(pseq.rel, "Genus", detection = 0, prevalence = .5)
pseq.core2 <- aggregate_rare(pseq.rel, "Family", detection = 0, prevalence = .5)
core.taxa <- taxa(pseq.core)
core.abundance <- sample_sums(core(pseq.rel, detection = .01, prevalence = .95))
core.abundance <- sample_sums(core(pseq.rel, detection = .05, prevalence = .95))
core.abundance <- sample_sums(core(pseq.rel, detection = .0, prevalence = .95))
core.abundance <- sample_sums(core(pseq.rel, detection = .1, prevalence = .95))
det <- c(0, 0.1, 0.5, 2, 5, 20)/100
prevalences <- seq(.05, 1, .05)
plot_core(pseq.rel,
prevalences = prevalences,
detections = det,
plot.type = "lineplot") +
xlab("Relative Abundance (%)")
#Core microbiome
core<- plot_core(pseq.rel,
prevalences = prevalences,
detections = det,
plot.type = "lineplot") +
xlab("Relative Abundance (%)")
save(core, file = "Plots/core_microbiome")
###Heatmap
install.packages("RColorBrewer")
###Heatmap
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
installed.packages("reshape")
library(reshape)
install.packages("reshape")
library(reshape)
prevalences <- seq(.05, 1, .05)
detections <- round(10^seq(log10(0.01), log10(.2), length = 9), 3)
# Also define gray color palette
gray <- gray(seq(0,1,length=5))
#Added pseq.rel, I thin... must be checked if it was in the the rednred version,; where it is initialized
#pseq.rel<- microbiome::transform(pseq, 'compositional')
#min-prevalence gets the 100th highest prevalence
p <- plot_core(pseq.rel,
plot.type = "heatmap",
colours = gray,
prevalences = prevalences,
detections = detections,
min.prevalence = prevalence(pseq.rel, sort = TRUE)[100]) +
labs(x = "Detection Threshold\n(Relative Abundance (%))") +
#Adjusts axis text size and legend bar height
theme(axis.text.y= element_text(size=8, face="italic"),
axis.text.x.bottom=element_text(size=8),
axis.title = element_text(size=10),
legend.text = element_text(size=8),
legend.title = element_text(size=10))
nstall.packages("remotes")
install.packages("remotes")
remotes::install_github("microbiome/microbiome")
install.packages("remotes")
remotes::install_github("microbiome/microbiome")
p <- plot_core(pseq.rel,
plot.type = "heatmap",
colours = gray,
prevalences = prevalences,
detections = detections,
min.prevalence = prevalence(pseq.rel, sort = TRUE)[100]) +
labs(x = "Detection Threshold\n(Relative Abundance (%))") +
#Adjusts axis text size and legend bar height
theme(axis.text.y= element_text(size=8, face="italic"),
axis.text.x.bottom=element_text(size=8),
axis.title = element_text(size=10),
legend.text = element_text(size=8),
legend.title = element_text(size=10))
library(microbiome)
p <- plot_core(pseq.rel,
plot.type = "heatmap",
colours = gray,
prevalences = prevalences,
detections = detections,
min.prevalence = prevalence(pseq.rel, sort = TRUE)[100]) +
labs(x = "Detection Threshold\n(Relative Abundance (%))") +
#Adjusts axis text size and legend bar height
theme(axis.text.y= element_text(size=8, face="italic"),
axis.text.x.bottom=element_text(size=8),
axis.title = element_text(size=10),
legend.text = element_text(size=8),
legend.title = element_text(size=10))
print(p)
save(p, file = "Plot/heat_map")
save(p, file = "Plots//heat_map")
detections <- seq(from = 50, to = round(max(abundances(pseq))/10, -1), by = 100)
detections <- seq(from = 50, to = round(max(abundances(taxas_juntas))/10, -1), by = 100)
p <- plot_core(taxas_juntas, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(5, "Spectral")),
min.prevalence = .2, horizontal = TRUE) +
theme(axis.text.x= element_text(size=8, face="italic", hjust=1),
axis.text.y= element_text(size=8),
axis.title = element_text(size=10),
legend.text = element_text(size=8),
legend.title = element_text(size=10))
library(RColorBrewer)
p <- plot_core(taxas_juntas, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(5, "Spectral")),
min.prevalence = .2, horizontal = TRUE) +
theme(axis.text.x= element_text(size=8, face="italic", hjust=1),
axis.text.y= element_text(size=8),
axis.title = element_text(size=10),
legend.text = element_text(size=8),
legend.title = element_text(size=10))
print(p)
p1 <- plot_core(taxas_juntas, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(5, "Spectral")),
min.prevalence = .2, horizontal = TRUE) +
theme(axis.text.x= element_text(size=8, face="italic", hjust=1),
axis.text.y= element_text(size=8),
axis.title = element_text(size=10),
legend.text = element_text(size=8),
legend.title = element_text(size=10))
print(p1)
save(p1, file= "Plots/heatmap_mas_cosas")
# Same with log10 compositional abundances
x <- microbiome::transform(taxas_juntas, "compositional")
tax <- "Dialister"
plot_density(x, tax, log10 = TRUE) +
ggtitle("Relative abundance") +
xlab("Relative abundance (%)")
tax <- "Family"
plot_density(x, tax, log10 = TRUE) +
ggtitle("Relative abundance") +
xlab("Relative abundance (%)")
otu_table(taxas_juntas)
tax <- "F55775"
tax <- "55775"
plot_density(x, tax, log10 = TRUE) +
ggtitle("Relative abundance") +
xlab("Relative abundance (%)")
#Boxplot de abundancias
p <- boxplot_abundance(taxas_juntas_g, x = "group", y = "nuevacol") + scale_y_log10()
#Boxplot de abundancias
p <- boxplot_abundance(taxas_juntas, x = "group", y = "nuevacol") + scale_y_log10()
print(p)
#Boxplot de abundancias
p3 <- boxplot_abundance(taxas_juntas, x = "group", y = "nuevacol") + scale_y_log10()
print(p3)
#Boxplot de abundancias
p3 <- boxplot_abundance(taxas_juntas, x = "nuevacol", y = "Akkermansia") + scale_y_log10()
print(p3)
#Boxplot de abundancias
p3 <- boxplot_abundance(taxas_juntas, x = "nuevacol", y = "") + scale_y_log10()
print(p3)
#Boxplot de abundancias
p3 <- boxplot_abundance(taxas_juntas, x = "nuevacol", y = "55775") + scale_y_log10()
print(p3)
save(p3, file = "Plots/abundancia_55775")
#Para ver la variación de la microbiota
p4 <- plot_landscape(pseq.rel, method = "NMDS", distance = "bray", col = "group", size = 3)
print(p4)
#Para ver la variación de la microbiota
p4 <- plot_landscape(pseq.rel, method = "NMDS", distance = "bray", col = "nuevacol", size = 3)
coef <- coefficients(permanova)["group1",]
permanova <- adonis(t(otu) ~ group,
data = meta, permutations=99, method = "bray")
#Curva de rarefacción
#Oso limpio Familia
library(vegan)
#install.packages("gtExtras")
library(gtExtras)
library(gt)
#Diversidad alfa
# Shannon
# Simpson
library("microbiome")
library(microbiome)
library("BiocManager")
library(qiime2R) # import data
library(phyloseq) # also the basis of data object. Data analysis and visualization
library(vegan) # some utility tools
library(data.table) # alternative to data.frame
library(dplyr) # data handling
library(tidyverse)
library(DT) ## interactive tables
library(ggplot2)
library(MicrobiotaProcess)
library(microbiome)
#install.packages("eulerr")
library(eulerr)
library(microbiome)
#devtools::install_github('microsud/microbiomeutilities')
library(microbiomeutilities)
Tab<- evenness(oso_limpio_F_1, c("pielou","simpson"))
Tab
print(Tab)
df2 <- Tab[order(Tab$pielou,decreasing=TRUE),]
df2
#
df2_pielou <- Tab[order(Tab$pielou,decreasing=TRUE),]
df2_pielou <- df2_pielou[order(df2_pielou$simpson, decreasing = TRUE)]
df2_pielou <- df2_pielou[order(df2_pielou$simpson, decreasing = TRUE)]
df2_simpson <- Tab[order(Tab$simpson, decreasing = TRUE)]
df2_simpson <- Tab[order(Tab$simpson, decreasing = TRUE),]
df2_pielou  <- df2_pielou[order(df2_pielou$simpson, decreasing = TRUE),]
#
df2_pielou <- Tab[order(Tab$pielou,decreasing=TRUE),]
df2_simpson  <- df2_pielou[order(df2_pielou$simpson, decreasing = TRUE),]
df2_simpson
#
df2_pielou <- Tab[order(Tab$pielou,decreasing=TRUE),]
df2_pielou
#
df2_pielou <- Tab[order(Tab,decreasing=TRUE),]
#
df2_pielou <- Tab[order(Tab$pielou,decreasing=TRUE),]
df2_pielou
df2_simpson  <- df2_pielou[order(df2_pielou$simpson, decreasing = TRUE),]
df2_simpson
#
df2_pielou <- Tab[order(Tab$pielou,decreasing=TRUE),]
df2_pielou
df2_simpson <- Tab[order(Tab$simpson, decreasing = TRUE),]
df2_simpson
#
df2_pielou <- Tab[order(Tab$pielou,decreasing=TRUE),]
df2_pielou
View(df2_pielou)
# Esto crea una tabla, pero solo muestra los primeros 6 valores y no en un orden especifico.
head(df2_pielou) %>%
gt() %>%
gt_theme_guardian()
df2_simpson
# Esto crea una tabla, pero solo muestra los primeros 6 valores y no en un orden especifico.
head(df2_pielou) %>%
gt() %>%
gt_theme_nytimes()
head(df2_simpson) %>%
gt() %>%
gt_theme_nytimes()
#
df2_pielou <- Tab[order(Tab$pielou,decreasing=FALSE),]
df2_pielou
# Esto crea una tabla, pero solo muestra los primeros 6 valores y no en un orden especifico.
head(df2_pielou) %>%
gt() %>%
gt_theme_nytimes()
df2_simpson <- Tab[order(Tab$simpson, decreasing = FALSE),]
df2_simpson
head(df2_simpson) %>%
gt() %>%
gt_theme_nytimes()
head(df1_simpson) %>% # para simpson
gt() %>%
gt_theme_nytimes()
df1_pielou <- Tab[order(Tab$pielou,decreasing=FALSE),] #Ordena la columna de pielou en el orden que le indico.
df1_simpson <- Tab[order(Tab$simpson, decreasing = FALSE),] #Ordena la columna de pielou en el orden que le indico.
# Esto crea una tabla, pero solo muestra los primeros 6 valores y no en un orden especifico
# Por ello, se lo indicamos anteriormente y los imprimimos aqui
head(df1_pielou) %>% # para pielou
gt() %>%
gt_theme_nytimes()
head(df1_simpson) %>% # para simpson
gt() %>%
gt_theme_nytimes()
df2_pielou <- Tab2[order(Tab$pielou,decreasing=FALSE),] #Ordena la columna de pielou en el orden que le indico.
# Para osos (genero)
Tab2<- evenness(oso_limpio_G_1, c("pielou","simpson")) # con la funcion evenness se puede sacar los indices de shannon y de pielou
Tab2 # se imprime el objeto para ver que corra y como se ve.
df2_pielou <- Tab2[order(Tab$pielou,decreasing=FALSE),] #Ordena la columna de pielou en el orden que le indico.
df2_pielou # se imprime el objeto para ver que corra y como se ve.
df2_simpson <- Tab2[order(Tab$simpson, decreasing = FALSE),] #Ordena la columna de pielou en el orden que le indico.
df2_simpson # se imprime el objeto para ver que corra y como se ve.
# Esto crea una tabla, pero solo muestra los primeros 6 valores y no en un orden especifico
# Por ello, se lo indicamos anteriormente y los imprimimos aqui
head(df2_pielou) %>% # para pielou
gt() %>%
gt_theme_nytimes()
# Para osos (genero)
Tab2<- evenness(oso_limpio_G_1, c("pielou","simpson")) # con la funcion evenness se puede sacar los indices de shannon y de pielou
Tab2 # se imprime el objeto para ver que corra y como se ve.
df2_pielou <- Tab2[order(Tab$pielou,decreasing=FALSE),] #Ordena la columna de pielou en el orden que le indico.
df2_pielou # se imprime el objeto para ver que corra y como se ve.
df2_pielou <- Tab2[order(Tab$pielou,decreasing=TRUE),] #Ordena la columna de pielou en el orden que le indico.
df2_pielou # se imprime el objeto para ver que corra y como se ve.
df2_pielou <- Tab2[order(Tab2$pielou,decreasing=TRUE),] #Ordena la columna de pielou en el orden que le indico.
df2_pielou # se imprime el objeto para ver que corra y como se ve.
# Esto crea una tabla, pero solo muestra los primeros 6 valores y no en un orden especifico
# Por ello, se lo indicamos anteriormente y los imprimimos aqui
head(df2_pielou) %>% # para pielou
gt() %>%
gt_theme_nytimes()
df2_simpson <- Tab2[order(Tab2$simpson, decreasing = FALSE),] #Ordena la columna de pielou en el orden que le indico.
df2_simpson # se imprime el objeto para ver que corra y como se ve.
head(df2_simpson) %>% # para simpson
gt() %>%
gt_theme_nytimes()
df2_simpson <- Tab2[order(Tab2$simpson, decreasing = TRUE),] #Ordena la columna de pielou en el orden que le indico.
head(df2_simpson) %>% # para simpson
gt() %>%
gt_theme_nytimes()
df2_pielou <- Tab2[order(Tab2$pielou,decreasing=FALSE),] #Ordena la columna de pielou en el orden que le indico.
df2_pielou # se imprime el objeto para ver que corra y como se ve.
# Esto crea una tabla, pero solo muestra los primeros 6 valores y no en un orden especifico
# Por ello, se lo indicamos anteriormente y los imprimimos aqui
head(df2_pielou) %>% # para pielou
gt() %>%
gt_theme_nytimes()
df2_simpson <- Tab2[order(Tab2$simpson, decreasing = FALSE),] #Ordena la columna de pielou en el orden que le indico.
df2_simpson # se imprime el objeto para ver que corra y como se ve.
head(df2_simpson) %>% # para simpson
gt() %>%
gt_theme_nytimes()
# Para peces (familia)
Tab3<- evenness(pez_limpio_F_1, c("pielou","simpson"))# con la funcion evenness se puede sacar los indices de shannon y de pielou
Tab3 # se imprime el objeto para ver que corra y como se ve.
df3_pielou <- Tab3[order(Tab3$pielou,decreasing=FALSE),] #Ordena la columna de pielou en el orden que le indico.
df3_pielou # se imprime el objeto para ver que corra y como se ve.
# Esto crea una tabla, pero solo muestra los primeros 6 valores y no en un orden especifico
# Por ello, se lo indicamos anteriormente y los imprimimos aqui
head(df3_pielou) %>% # para pielou
gt() %>%
gt_theme_nytimes()
df3_simpson <- Tab3[order(Tab3$simpson, decreasing = FALSE),] #Ordena la columna de pielou en el orden que le indico.
df3_simpson # se imprime el objeto para ver que corra y como se ve.
head(df3_simpson) %>% # para simpson
gt() %>%
gt_theme_nytimes()
df3_pielou <- Tab3[order(Tab3$pielou,decreasing=TRUE),] #Ordena la columna de pielou en el orden que le indico.
df3_pielou # se imprime el objeto para ver que corra y como se ve.
# Esto crea una tabla, pero solo muestra los primeros 6 valores y no en un orden especifico
# Por ello, se lo indicamos anteriormente y los imprimimos aqui
head(df3_pielou) %>% # para pielou
gt() %>%
gt_theme_nytimes()
df4_pielou <- Tab4[order(Tab4$pielou,decreasing=TRUE),] #Ordena la columna de pielou en el orden que le indico.
df4_pielou # se imprime el objeto para ver que corra y como se ve.
# Esto crea una tabla, pero solo muestra los primeros 6 valores y no en un orden especifico
# Por ello, se lo indicamos anteriormente y los imprimimos aqui
head(df4_pielou) %>% # para pielou
gt() %>%
gt_theme_nytimes()
# Para peces (genero)
Tab4<- evenness(pez_limpio_G_1, c("pielou","simpson")) # con la funcion evenness se puede sacar los indices de shannon y de pielou
Tab4 # se imprime el objeto para ver que corra y como se ve.
df4_pielou <- Tab4[order(Tab4$pielou,decreasing=TRUE),] #Ordena la columna de pielou en el orden que le indico.
df4_pielou # se imprime el objeto para ver que corra y como se ve.
# Esto crea una tabla, pero solo muestra los primeros 6 valores y no en un orden especifico
# Por ello, se lo indicamos anteriormente y los imprimimos aqui
head(df4_pielou) %>% # para pielou
gt() %>%
gt_theme_nytimes()
df4_simpson <- Tab4[order(Tab4$simpson, decreasing = TRUE),] #Ordena la columna de pielou en el orden que le indico.
df4_simpson # se imprime el objeto para ver que corra y como se ve.
head(df4_simpson) %>% # para simpson
gt() %>%
gt_theme_nytimes()
df4_simpson <- Tab4[order(Tab4$simpson, decreasing = TRUE),] #Ordena la columna de pielou en el orden que le indico.
df4_simpson # se imprime el objeto para ver que corra y como se ve.
head(df4_simpson) %>% # para simpson
gt() %>%
gt_theme_nytimes()
df4_pielou <- Tab4[order(Tab4$pielou,decreasing=FALSE),] #Ordena la columna de pielou en el orden que le indico.
df4_pielou # se imprime el objeto para ver que corra y como se ve.
# Esto crea una tabla, pero solo muestra los primeros 6 valores y no en un orden especifico
# Por ello, se lo indicamos anteriormente y los imprimimos aqui
head(df4_pielou) %>% # para pielou
gt() %>%
gt_theme_nytimes()
df4_simpson <- Tab4[order(Tab4$simpson, decreasing = FALSE),] #Ordena la columna de pielou en el orden que le indico.
df4_simpson # se imprime el objeto para ver que corra y como se ve.
head(df4_simpson) %>% # para simpson
gt() %>%
gt_theme_nytimes()
p.shannon<- boxplot_alpha(taxas_juntas,
index="Shannon",
x_var="nuevacol",
fill.color= c(DATA_OSO1="blue", DATA_PEZ1="purple"))
p.shannon<- p.shannon + theme_minimal()+
labs(x="data", y="Shannon diversity")+
theme(axis.text=element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size = 16))
p.shannon
library(MicrobiotaProcess) # se necesita esta libreria
oso1familia <- get_taxadf(obj=oso_limpio_F_1, taxlevel=7, type = "others") # indico la base que quiero y que tome en cuenta todos los niveles taxonomicos.
# Arriba se indican las especificaciones para el plot, como el tamano de letra, los textos, los colores.
plot_oso1familia # se imprime el objeto
# Las 30 taxonomias mas abundantes se visualizaron por default
plot_oso1familia <- ggbartax(obj=oso1familia) +
xlab("nuevacol") +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
# Arriba se indican las especificaciones para el plot, como el tamano de letra, los textos, los colores.
plot_oso1familia # se imprime el objeto
pez1familia <- get_taxadf(obj=pez_limpio_F_1, taxlevel=7, type = "others") # indico la base que quiero y que tome en cuenta todos los niveles taxonomicos.
# Las 30 taxonomias mas abundantes se visualizaron por default
plot_pez1familia <- ggbartax(obj=pez1familia) +
xlab("nuevacol") +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
# Arriba se indican las especificaciones para el plot, como el tamano de letra, los textos, los colores.
plot_pez1familia # se imprime el objeto
oso1genero <- get_taxadf(obj=oso_limpio_G_1, taxlevel=7, type = "others") # indico la base que quiero y que tome en cuenta todos los niveles taxonomicos.
# Las 30 taxonomias mas abundantes se visualizaron por default
plot_oso1genero <- ggbartax(obj=oso1genero) +
xlab("nuevacol") +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
# Arriba se indican las especificaciones para el plot, como el tamano de letra, los textos, los colores.
plot_oso1genero # se imprime el objeto
pez1genero <- get_taxadf(obj=pez_limpio_G_1, taxlevel=7, type = "others") # indico la base que quiero y que tome en cuenta todos los niveles taxonomicos.
# Las 30 taxonomias mas abundantes se visualizaron por default
plot_pez1genero <- ggbartax(obj=pez1genero) +
xlab("nuevacol") +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
# Arriba se indican las especificaciones para el plot, como el tamano de letra, los textos, los colores.
plot_pez1genero # se imprime el objeto
#Cambie los valores de detection y prevalence para que saliera bien
p0<- subset_samples(taxas_juntas)
p0<-core(p0, detection= 0.1/100, prevalence=40/100)
prevalencia_familia<-plot_taxa_prevalence(p0, "Family", detection = 0.1/100)
red<-plot_net(taxas_juntas, type = "taxa", point_label = "Family", point_size = 2, point_alpha = 0.5, maxdist = 0.5, color = "Family", distance = "bray", laymeth = "auto")
red
p1<- subset_samples(taxas_juntas)
p1<-core(p1, detection= 0.1/100, prevalence=40/100)
prevalencia_genero<-plot_taxa_prevalence(p0, "Genus", detection = 0.1/100)
save(prevalencia_familia, file = "Plots/prevalencia_genero")
red_1<-plot_net(taxas_juntas, type = "taxa", point_label = "Genus", point_size = 2, point_alpha = 0.5, maxdist = 0.5, color = "Genus", distance = "bray", laymeth = "auto")
red_1
red_1<-plot_net(taxas_juntas, type = "taxa", point_label = "Genus", point_size = 2, point_alpha = 0.5, maxdist = 0.5, color = "Genus", distance = "bray", laymeth = "auto", colors("blue"))
red_1<-plot_net(taxas_juntas, type = "taxa", point_label = "Genus", point_size = 2, point_alpha = 0.5, maxdist = 0.5, color = "Genus", distance = "bray", laymeth = "auto"
red_1<-plot_net(taxas_juntas, type = "taxa", point_label = "Genus", point_size = 2, point_alpha = 0.5, maxdist = 0.5, color = "Genus", distance = "bray", laymeth = "auto")
red_1<-plot_net(taxas_juntas, type = "taxa", point_label = "Genus", point_size = 2, point_alpha = 0.5, maxdist = 0.5, color = "Genus", distance = "bray", laymeth = "auto")
red_1
pseq.rel <- microbiome::transform(taxas_juntas, "compositional")
head(prevalence(pseq.rel, detection = 1/100, sort = TRUE))
head(prevalence(pseq.rel, detection = 1/100, sort = TRUE, count = TRUE))
core.taxa.standard <- core_members(pseq.rel, detection = 0, prevalence = 50/100)
pseq.core <- core(pseq.rel, detection = 0, prevalence = .5)
pseq.core2 <- aggregate_rare(pseq.rel, "Family", detection = 0, prevalence = .5)
core.taxa <- taxa(pseq.core)
det <- c(0, 0.1, 0.5, 2, 5, 20)/100
prevalences <- seq(.05, 1, .05)
#Core microbiome
core<- plot_core(pseq.rel,
prevalences = prevalences,
detections = det,
plot.type = "lineplot") +
xlab("Relative Abundance (%)")
install.packages("RColorBrewer")
library(RColorBrewer)
library(reshape)
install.packages("reshape")
#install.packages("reshape")
library(reshape)
prevalences <- seq(.05, 1, .05)
detections <- round(10^seq(log10(0.01), log10(.2), length = 9), 3)
# Also define gray color palette
gray <- gray(seq(0,1,length=5))
#Added pseq.rel, I thin... must be checked if it was in the the rednred version,; where it is initialized
#pseq.rel<- microbiome::transform(pseq, 'compositional')
#min-prevalence gets the 100th highest prevalence
install.packages("remotes")
library(microbiome)
p <- plot_core(pseq.rel,
plot.type = "heatmap",
colours = gray,
prevalences = prevalences,
detections = detections,
min.prevalence = prevalence(pseq.rel, sort = TRUE)[100]) +
labs(x = "Detection Threshold\n(Relative Abundance (%))") +
#Adjusts axis text size and legend bar height
theme(axis.text.y= element_text(size=8, face="italic"),
axis.text.x.bottom=element_text(size=8),
axis.title = element_text(size=10),
legend.text = element_text(size=8),
legend.title = element_text(size=10))
print(p)
# Otro heatmap
p1 <- plot_core(taxas_juntas, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(5, "Spectral")),
min.prevalence = .2, horizontal = TRUE) +
theme(axis.text.x= element_text(size=8, face="italic", hjust=1),
axis.text.y= element_text(size=8),
axis.title = element_text(size=10),
legend.text = element_text(size=8),
legend.title = element_text(size=10))
print(p1)
plot_density(pseq, "Dialister") + ggtitle("Absolute abundance")
plot_density(pseq, "Dialister") + ggtitle("Absolute abundance")
# Same with log10 compositional abundances
#No se si snos sirve esto, en base a la prevalencia que dio el heat map puse el tax 55775, porque es el que tenía la prevalencia más alta
x <- microbiome::transform(taxas_juntas, "compositional")
tax <- "55775"
plot_density(x, tax, log10 = TRUE) +
ggtitle("Relative abundance") +
xlab("Relative abundance (%)")
#Boxplot de abundancias
p3 <- boxplot_abundance(taxas_juntas, x = "nuevacol", y = "55775") + scale_y_log10()
print(p3)
#Para ver la variación de la microbiota
#Falta ver como quitar los 0
p4 <- plot_landscape(pseq.rel, method = "NMDS", distance = "bray", col = "nuevacol", size = 3)
