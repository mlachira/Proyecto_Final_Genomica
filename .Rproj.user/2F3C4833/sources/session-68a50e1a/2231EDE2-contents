#Melisa Lachira
#Diana Karina Rangel
#Maria del Carmen Ramírez

#Cargamos la libreria ya previamente descargada "phyloseq"
#Si no se tiene descargado "phyloseq" se puede descargar con el siguiente código
#if (!require("BiocManager", tranquilamente = VERDADERO))
#install.packages("BiocManager")
#BiocManager::install("phyloseq")
#Phyloseq nos va a permitir importar, almacenar, analizar y mostrar gráficamente datos de secuenciación filogenéticos complejos que ya se han agrupado en unidades taxonómicas operativas (OTU).
library(phyloseq)

#Descarga de la libreria de "MGnifyR"
install.packages("MGnifyR")
devtools::install_github("beadyallen/MGnifyR")
#MGnifyR sirve para buscar y recuperar datos del recurso Metagenómica de EBI.
#Cargamos la libreria "MGnifyR"
library(MGnifyR)


### DATA ###

#En MGnify se encontro una base de datos sobre "Microbioma intestinal de osos en hibernación"
#Las muestras se recolectaron del colón 17 osos negros (Ursus americanus) en hibernación en Minessota, EUA.
#Se identificaron las bacterias presentes en la microbioma utilizando 16S aplicon data
#https://www.ebi.ac.uk/metagenomics/studies/MGYS00003951#overview
#Study MGYS00003951
mgclnt <- mgnify_client(usecache = T, cache_dir = '/tmp/MGnify_cache')
accession_list <- mgnify_analyses_from_studies(mgclnt, "MGYS00003951", usecache = T)
meta_dataframe <- mgnify_get_analyses_metadata(mgclnt, accession_list, usecache = T )
oso <- mgnify_get_analyses_phyloseq(mgclnt, meta_dataframe$analysis_accession, usecache = T)


#Al tener el analisis de phyloseq de la base de datos de oso nos dimos cuenta que tiene varias NA en genero y había menos en familia, por lo que se creo un objeto de cada uno 
#Borramos de la base de datos aquellos que en Familia tengan NA
oso_limpio_F_1 <- subset_taxa(oso, !(Family %in% c(NA)))
oso_limpio_F_1
#Con la función view me permite ver las muestras y si nivel taxonomico 
View(tax_table(oso_limpio_F_1))
#Con save creamos un objeto llamado oso_limpio_familia para que así otras puedan cargar la base de datos sin la necesidad de hacer todo lo anterior, solo con la función load y nombre del objeto
save(oso_limpio_F_1, file="Data/oso_limpio_1_familia")

#Borramos de la base de datos aquellos que en Genero tengan NA
oso_limpio_G_1 <- subset_taxa(oso, !(Genus %in% c(NA)))
oso_limpio_G_1
#Con la función view me permite ver las muestras y si nivel taxonomico 
View(tax_table(oso_limpio_G_1))
#Con save creamos un objeto llamado oso_limpio_familia para que así otras puedan cargar la base de datos sin la necesidad de hacer todo lo anterior, solo con la función load y nombre del objeto
save(oso_limpio_G_1, file="Data/oso_limpio_1_genero")

#En MGnify se encontro una base de datos de "Song Colorado freshwater fish"
#Las muestras son de baba y tripa de diferentes especies de peces de agua dulce del río Colorado, EUA.
#https://www.ebi.ac.uk/metagenomics/studies/MGYS00003748#overview
#Study MGYS00003748
mgclnt <- mgnify_client(usecache = T, cache_dir = '/tmp/MGnify_cache')
accession_list <- mgnify_analyses_from_studies(mgclnt, "MGYS00003748", usecache = T)
meta_dataframe <- mgnify_get_analyses_metadata(mgclnt, accession_list, usecache = T )
peces <- mgnify_get_analyses_phyloseq(mgclnt, meta_dataframe$analysis_accession, usecache = T)
peces


#Al tener el analisis de phyloseq de la base de datos de peces nos dimos cuenta que tiene varias NA en genero y había menos en familia, por lo que se creo un objeto de cada uno 
#Borramos de la base de datos aquellos que en Familia tengan NA
pez_limpio_F_1 <- subset_taxa(peces, !(Family %in% c(NA)))
pez_limpio_F_1
View(tax_table(pez_limpio_F_1))
#Con save creamos un objeto llamado oso_limpio_familia para que así otras puedan cargar la base de datos sin la necesidad de hacer todo lo anterior, solo con la función load y nombre del objeto
save(pez_limpio_F_1, file="Data/pez_limpio_1_familia")

#Borramos de la base de datos aquellos que en Genero tengan NA
pez_limpio_G_1 <- subset_taxa(peces, !(Genus %in% c(NA)))
pez_limpio_G_1
#Con la función view me permite ver las muestras y si nivel taxonomico 
View(tax_table(pez_limpio_G_1))
#Con save creamos un objeto llamado oso_limpio_familia para que así otras puedan cargar la base de datos sin la necesidad de hacer todo lo anterior, solo con la función load y nombre del objeto
save(pez_limpio_G_1, file="Data/pez_limpio_1_genero")

#Todas las bases de datos que se utilizaron en el proyecto se encuentran en la carpeta "data"

##### Ignora esto ahorita jajaj
otu_table(peces)
sample_data(oso)
tax_table(oso)
View(tax_table(oso))
####Link de phyoseq:
sample_variables(oso)
plot_bar(oso, fill = "Genus")

##### PENDIENTES: #######
##### Crear objetos en DADA2 #####
##### Checar analisis que vienen en el analisis de DADA2 #######
##### Analisis comparativo? #######