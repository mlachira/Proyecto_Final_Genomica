# Paquetes necesarios para los analisis:
library(microbiome)
library("BiocManager")
library(phyloseq)
library(vegan)
library(dplyr)
library(ggplot2)
library(MicrobiotaProcess)
library(microbiome)
#install.packages("eulerr")
library(eulerr)
#devtools::install_github('microsud/microbiomeutilities')
library(microbiomeutilities)
# Para cargar las librerias que limpiamos previamente de las NA (en el script "bases_de_datos_mgnify" esta descrito)
load("Data/oso_limpio_1_familia")
# Para cargar las librerias que limpiamos previamente de las NA (en el script "bases_de_datos_mgnify" esta descrito)
getwd()
setwd("C:/Users/gabof/OneDrive/Documentos/GitHub/Proyecto_Final_Genomica_Funcional")
load("Data/oso_limpio_1_familia")
load("Data/oso_limpio_1_genero")
load("Data/pez_limpio_1_familia")
load("Data/pez_limpio_1_genero")
# Adicion de una columna
# Se adiciono una columna a cada base para facilitar las instrucciones en los codigos de los analisis
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
sample_data(oso_limpio_G_1)$nuevacol<-"DATA_OSO1"
sample_data(pez_limpio_F_1)$nuevacol<-"DATA_PEZ1"
sample_data(pez_limpio_G_1)$nuevacol<-"DATA_PEZ1"
# OSOS
View(sample_data(oso_limpio_F_1)) # observamos la base, que ya contiene una nueva columna
base_juntas<-merge_phyloseq(oso_limpio_F_1, pez_limpio_F_1) # se usa la funcion merge_phyloseq para juntarlos
View(sample_data(base_juntas)) # se visualiza su sample_data
# Para juntar especies con la misma taxonomia, en este caso a nivel de familia.
taxas_juntas<- tax_glom(base_juntas, taxrank="Family", NArm=TRUE, bad_empty=c(NA, "", " ", "\t"))
taxas_juntas # se imprime el objeto para asegurarse de que se cargo bien
load("Data/taxas_juntas_g") # con esto los demas integrantes pueden cargar la base sin tener que cagar el objeto desde cero.
matrix <- as.matrix(data.frame(otu_table(oso_limpio_F_1)))
rownames(matrix) <- as.character(tax_table(oso_limpio_F_1)[, "Family"])
rownames(matrix) <- as.character(tax_table(oso_limpio_F_1)[, "Species"])
rownames(matrix) <- as.character(tax_table(pez_limpio_F_1)[, "Species"])
## Heatmaps ##
library(phyloseq)
metadata_sub <- data.frame(sample_data(oso_limpio_F_1))
# Define the annotation color for columns and rows
annotation_col = data.frame(
Subject = as.factor(metadata_sub$subject),
`Body site` = as.factor(metadata_sub$body.site),
check.names = FALSE
)
rownames(annotation_col) = rownames(metadata_sub)
rownames(matrix) <- as.character(tax_table(oso_limpio_F_1)[, ""])
rownames(matrix) <- as.character(tax_table(oso_limpio_F_1)[, "Family"])
as.character(tax_table(oso_limpio_F_1))
tax_table(oso_limpio_F_1)
oso_limpio_F_1
`tax_table<-`(oso_limpio_F_1)
tax_table(oso_limpio_F_1)
# Para cargar las librerias que limpiamos previamente de las NA (en el script "bases_de_datos_mgnify" esta descrito)
load("Data/oso_limpio_1_familia")
load("Data/oso_limpio_1_genero")
load("Data/pez_limpio_1_familia")
load("Data/pez_limpio_1_genero")
# Adicion de una columna
# Se adiciono una columna a cada base para facilitar las instrucciones en los codigos de los analisis
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
sample_data(oso_limpio_G_1)$nuevacol<-"DATA_OSO1"
sample_data(pez_limpio_F_1)$nuevacol<-"DATA_PEZ1"
sample_data(pez_limpio_G_1)$nuevacol<-"DATA_PEZ1"
oso_limpio_F_1
tax_table(oso_limpio_F_1)
data("GlobalPatterns")
tax_table(GlobalPatterns)
matrix <- as.matrix(data.frame(otu_table(oso_limpio_F_1)))
phyloseq::tax_table(oso_limpio_F_1)
tax_table(oso_limpio_F_1)
rownames(matrix) <- as.character(phyloseq::tax_table(oso_limpio_F_1)[, "Family"])
metadata_sub <- data.frame(sample_data(oso_limpio_F_1))
# Define the annotation color for columns and rows
annotation_col = data.frame(
Subject = as.factor(metadata_sub$subject),
check.names = FALSE
)
rownames(annotation_col) = rownames(metadata_sub)
metadata_sub <- data.frame(sample_data(oso_limpio_F_1))
# Define the annotation color for columns and rows
annotation_col = data.frame(
Subject = as.factor(metadata_sub$subject),
check.names = FALSE
)
rownames(annotation_col) = rownames(metadata_sub)
annotation_row = data.frame(
Family = as.factor(tax_table(oso_limpio_F_1)[, "Family"])
)
annotation_row = data.frame(
Family = as.factor(phyloseq::tax_table(oso_limpio_F_1)[, "Family"])
)
rownames(annotation_row) = rownames(matrix)
# ann_color should be named vectors
phylum_col = RColorBrewer::brewer.pal(length(levels(annotation_row$Family)), "Paired")
names(phylum_col) = levels(annotation_row$Family)
ann_colors = list(
Phylum = phylum_col
)
ComplexHeatmap::pheatmap(matrix, scale= "row",
annotation_col = annotation_col,
annotation_row = annotation_row,
annotation_colors = ann_colors)
## Heatmaps ##
plot_heatmap(oso_limpio_F_1, method = "NMDS", distance = "bray")
## Heatmaps ##
plot_heatmap(pez_limpio_F_1, method = "NMDS", distance = "bray")
## Heatmaps ##
plot_heatmap(oso1genero, method = "NMDS", distance = "bray")
## Heatmaps ##
plot_heatmap(oso_limpio_G_1, method = "NMDS", distance = "bray")
# Otro heatmap
# Para osos negros (familia):
sample_oso <- function(oso_limpio_F_1, FUN = sample,...){
# Otro heatmap
# Para osos negros (familia):
sample_oso <- function(oso_limpio_F_1, FUN = sample,...){
ids <- sample_names(oso_limpio_F_1)
sampled_ids <- FUN(ids, ...)
oso_limpio_F_1 <- prune_samples(sampled_ids, oso_limpio_F_1)
return(oso_limpio_F_1)
}
oso_corto_F_1<- sample_oso(oso_limpio_F_1, size=10)
oso_corto_F_1
oso_corto_F_1
plot_density(pseq, "Dialister") + ggtitle("Absolute abundance")
# Same with log10 compositional abundances
#No se si snos sirve esto, en base a la prevalencia que dio el heat map puse el tax 55775, porque es el que tenía la prevalencia más alta
x <- microbiome::transform(taxas_juntas, "compositional")
