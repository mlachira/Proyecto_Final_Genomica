# Para leer los archivos tsv descargados:
metadata1 <- read_tsv("brownbearmeta.tsv")
# Base de osos cafes:
osos_cafe <- download_zenodo("10.5281/zenodo.5759055", path = "")
#Cargamos la libreria ya previamente descargada "phyloseq"
#Si no se tiene descargado "phyloseq" se puede descargar con el siguiente codigo
#if (!require("BiocManager", tranquilamente = VERDADERO))
#install.packages("BiocManager")
#BiocManager::install("phyloseq")
#Phyloseq nos va a permitir importar, almacenar, analizar y mostrar gráficamente datos de secuenciación filogenéticos complejos que ya se han agrupado en unidades taxonómicas operativas (OTU).
library(phyloseq)
load("Data/oso_limpio_1_familia")
load("Data/oso_limpio_1_familia")
getwd()
setwd("C:/Users/Luis Diego/Documents/Proyecto_Final_Genomica")
load("Data/oso_limpio_1_familia")
load("Data/oso_limpio_1_genero")
load("Data/oso_limpio_2_familia")
load("Data/oso_limpio_2_genero")
load("Data/pez_limpio_1_familia")
load("Data/pez_limpio_1_genero")
# Adicion de una columna:
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
sample_data(oso_limpio_F_2)$nuevacol<-"DATA_OSO2"
sample_data(oso_limpio_G_1)$nuevacol<-"DATA_OSO1"
sample_data(oso_limpio_G_2)$nuevacol<-"DATA_OSO2"
sample_data(pez_limpio_F_1)$nuevacol<-"DATA_PEZ1"
sample_data(pez_corto_G_1)$nuevacol<-"DATA_PEZ2"
# En taxlevel la verdad no entiendo que cambia, solo se que el maximo es de 7 y las graficas si salen bien diferentes si lo cambias
oso1familia <- get_taxadf(obj=oso_limpio_F_1, taxlevel=7, type = "others")
# Para ver las 6 graficas al mismo tiempo:
par(mfrow=c(3,2))
sample_data(pez_limpio_G_1)$nuevacol<-"DATA_PEZ2"
View(tax_table(pez_limpio_G_1))
View(tax_table(oso_limpio_F_2))
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
sample_data(oso_limpio_F_2)$nuevacol<-"DATA_OSO2"
sample_data(oso_limpio_G_1)$nuevacol<-"DATA_OSO1"
sample_data(oso_limpio_G_2)$nuevacol<-"DATA_OSO2"
sample_data(pez_limpio_F_1)$nuevacol<-"DATA_PEZ1"
sample_data(pez_limpio_G_1)$nuevacol<-"DATA_PEZ2"
View(tax_table(oso_limpio_F_2))
sample_data(pez_limpio_F_1)
intento1<- merge_phyloseq(oso_limpio_F_1, oso_limpio_F_2, oso_limpio_G_1, oso_limpio_G_2, pez_limpio_F_1, pez_corto_G_1)
intento1<- merge_phyloseq(oso_limpio_F_1, oso_limpio_F_2, oso_limpio_G_1, oso_limpio_G_2, pez_limpio_F_1, pez_limpio_G_1)
p.shannon <- boxplot_alpha(intento1,
index = "shannon",
x_var = "nuevacol",
fill.colors = c(female="cyan4", male="deeppink4"))
intento1<- merge_phyloseq(oso_limpio_F_1, oso_limpio_F_2, pez_limpio_F_1,)
intento1<- merge_phyloseq(oso_limpio_F_1, oso_limpio_F_2, pez_limpio_F_1)
library(microbiome)
p.shannon <- boxplot_alpha(intento1,
index = "shannon",
x_var = "nuevacol",
fill.colors = c(female="cyan4", male="deeppink4"))
p.shannon <- boxplot_alpha(intento1,
index = "shannon",
x_var = "nuevacol",
fill.colors = c(female="cyan4", male="deeppink4", "red"))
p.shannon <- p.shannon + theme_minimal() +
labs(x="Sex", y="Shannon diversity") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16))
p.shannon
pseq.rel <- microbiome::transform(intento1, "compositional")
intento2 <- unique(as.character(meta(pseq.rel)$nuevacol))
print(intento2)
list_core <- c() # an empty object to store information
for (n in intento2){ # for each variable n in DiseaseState
#print(paste0("Identifying Core Taxa for ", n))
ps.sub <- subset_samples(pseq.rel, nuevacol == n) # Choose sample from DiseaseState by n
core_m <- core_members(ps.sub, # ps.sub is phyloseq selected with only samples from g
detection = 0.001, # 0.001 in atleast 90% samples
prevalence = 0.75)
print(paste0("No. of core taxa in ", n, " : ", length(core_m))) # print core taxa identified in each DiseaseState.
list_core[[n]] <- core_m # add to a list core taxa for each group.
#print(list_core)
}
# Para ver las 6 graficas al mismo tiempo:
par(mfrow=c(3,2))
print(list_core)
mycols <- c(nonCRC="#d6e2e9", CRC="#cbf3f0", H="#fcf5c7")
plot(venn(list_core),
fills = mycols)
install.packages(eulerr)
install.packages("eulerr")
print(list_core)
mycols <- c(nonCRC="#d6e2e9", CRC="#cbf3f0", H="#fcf5c7")
plot(venn(list_core),
fills = mycols)
print(list_core)
plot(venn(list_core),
fills = mycols)
library(eulerr)
plot(venn(list_core),
fills = mycols)
p.shannon
View(sample_data(intento1))
View(tax_table(intento1))
p.shannon <- boxplot_alpha(intento1,
index = "shannon",
x_var = "nuevacol",
fill.colors = c(DATA_OSO1="cyan4", DATA_OSO2="deeppink4", DATA_PEZ1="red"))
p.shannon <- p.shannon + theme_minimal() +
labs(x="datas", y="Shannon diversity") +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=16),
legend.text = element_text(size=12),
legend.title = element_text(size=16))
p.shannon
# En taxlevel la verdad no entiendo que cambia, solo se que el maximo es de 7 y las graficas si salen bien diferentes si lo cambias
oso1familia <- get_taxadf(obj=intento1, taxlevel=7, type = "others")
install.packages("MicrobiotaProcess")
# En taxlevel la verdad no entiendo que cambia, solo se que el maximo es de 7 y las graficas si salen bien diferentes si lo cambias
oso1familia <- get_taxadf(obj=intento1, taxlevel=7, type = "others")
mycols <- c(DATA_OSO1="#d6e2e9", DATA_OSO2="#cbf3f0", DATA_PEZ1="#fcf5c7")
plot(venn(list_core),
fills = mycols)
pseq.rel <- microbiome::transform(intento1, "Family")
pseq.rel <- microbiome::transform(intento1, "Total")
intento2 <- unique(as.character(meta(pseq.rel)$Family))
print(intento2)
intento2 <- unique(as.character(meta(pseq.rel)$nuevacol))
print(intento2)
list_core <- c() # an empty object to store information
########
intento1
tax_table(intento1)
tax_table(intento1$Family)
tax_table(intento1$"Family")
pseq.rel <- microbiome::transform(intento1, "Total")
intento2 <- unique(as.character(meta(pseq.rel)$nuevacol))
pseq.rel <- microbiome::transform(intento1, "total")
intento2 <- unique(as.character(meta(pseq.rel)$nuevacol))
print(intento2)
list_core <- c() # an empty object to store information
for (n in intento2){ # for each variable n in DiseaseState
#print(paste0("Identifying Core Taxa for ", n))
ps.sub <- subset_samples(pseq.rel, nuevacol == n) # Choose sample from DiseaseState by n
core_m <- core_members(intento1, # ps.sub is phyloseq selected with only samples from g
detection = 0.001, # 0.001 in atleast 90% samples
prevalence = 0.75)
print(paste0("No. of core taxa in ", n, " : ", length(core_m))) # print core taxa identified in each DiseaseState.
list_core[[n]] <- core_m # add to a list core taxa for each group.
#print(list_core)
}
install.packages("eulerr")
print(list_core)
mycols <- c(DATA_OSO1="#d6e2e9", DATA_OSO2="#cbf3f0", DATA_PEZ1="#fcf5c7")
plot(venn(list_core),
fills = mycols)
# Para ver las 6 graficas al mismo tiempo:
par(mfrow=c(3,2))
for (n in intento2){ # for each variable n in DiseaseState
#print(paste0("Identifying Core Taxa for ", n))
ps.sub <- subset_samples(pseq.rel, nuevacol == n) # Choose sample from DiseaseState by n
core_m <- core_members(ps.sub, # ps.sub is phyloseq selected with only samples from g
detection = 0.001, # 0.001 in atleast 90% samples
prevalence = 0.75)
print(paste0("No. of core taxa in ", n, " : ", length(core_m))) # print core taxa identified in each DiseaseState.
list_core[[n]] <- core_m # add to a list core taxa for each group.
#print(list_core)
}
otu_table(intento1)
data("GlobalPatterns")
otu_table(GlobalPatterns)
View(sample_data(GlobalPatterns))
otu_table(oso_limpio_F_1)
otu_table(oso_corto_F_2)
otu_table(oso_limpio_F_2)
x1<-tax_glom(intento1, taxrank="Family"(intento1)[1], NArm=TRUE, bad_empty=c(NA, "", " ", "\t"))
(x1 <- tax_glom(GlobalPatterns, taxrank="Family")
x1 <- tax_glom(GlobalPatterns, taxrank="Family"
x1 <- (tax_glom(GlobalPatterns, taxrank="Family")
x1 <- tax_glom(GlobalPatterns, taxrank="Family")
x1 <- tax_glom(GlobalPatterns, taxrank="Family")
x1<-tax_glom(intento1, taxrank="Family", NArm=TRUE, bad_empty=c(NA, "", " ", "\t"))
x1
otu_table(pez_limpio_F_1)
otu_table(oso_limpio_F_2)
x1<-tax_glom(intento1, taxrank="Family", NArm=TRUE, bad_empty=c(NA, "", " ", "\t"))
load("Data/oso_limpio_1_familia")
load("Data/oso_limpio_1_genero")
load("Data/oso_limpio_2_familia")
load("Data/oso_limpio_2_genero")
load("Data/pez_limpio_1_familia")
load("Data/pez_limpio_1_genero")
# Adicion de una columna:
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
#sample_data(oso_limpio_F_2)$nuevacol<-"DATA_OSO2"
sample_data(oso_limpio_G_1)$nuevacol<-"DATA_OSO1"
library(ggplot2)
library(MicrobiotaProcess)
#BiocManager::install("microbiome")
library(microbiome)
library("BiocManager")
## data analysis
library(qiime2R) # import data
library(phyloseq) # also the basis of data object. Data analysis and visualization
library(vegan) # some utility tools
library(data.table) # alternative to data.frame
library(dplyr) # data handling
#install.packages("tidyverse")
library(tidyverse)
#install.packages("DT")
library(DT) ## interactive tables
# Para importar el tsv con datos que nos interesan:
#install.packages("readr")
library(readr)
# Adicion de una columna:
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
#sample_data(oso_limpio_F_2)$nuevacol<-"DATA_OSO2"
sample_data(oso_limpio_G_1)$nuevacol<-"DATA_OSO1"
#sample_data(oso_limpio_G_2)$nuevacol<-"DATA_OSO2"
sample_data(pez_limpio_F_1)$nuevacol<-"DATA_PEZ1"
sample_data(pez_limpio_G_1)$nuevacol<-"DATA_PEZ2"
pez_limpio_G_1
sample_data(oso_limpio_F_1)
sample_data(oso_limpio_F_1)
sample_data(oso_limpio_F_1)
sample_data(oso_limpio_F_1)
#OSOS
View(sample_data(oso_limpio_F_1))
#OSOS
View(sample_data(oso_limpio_F_1))
#OSOS
View(sample_data(oso_limpio_F_1))
#PECES
View(sample_data(oso_limpio_F_1))
View(sample_data(oso_limpio_G_1))
#PECES
View(sample_data(pez_limpio_F_1))
sample_data(pez_limpio_F_1)
x1
intento1<-merge_phyloseq(oso_limpio_F_1, pez_limpio_F_1)
sample_data(intento1)
x1<- tax_glom(intento1, taxrank="Family", NArm=TRUE, bad_empty=c(NA, "", " ", "\t"))
x1
sample_data(x1)
pseq.rel <- microbiome::transform(x1, "compositional")
disease_states <- unique(as.character(meta(pseq.rel)$nuevacol))
print(disease_states)
list_core <- c() # an empty object to store information
for (n in disease_states){ # for each variable n in DiseaseState
#print(paste0("Identifying Core Taxa for ", n))
ps.sub <- subset_samples(pseq.rel, nuevacol == n) # Choose sample from DiseaseState by n
core_m <- core_members(ps.sub, # ps.sub is phyloseq selected with only samples from g
detection = 0.001, # 0.001 in atleast 90% samples
prevalence = 0.00,
include.lowest = FALSE)
print(paste0("No. of core taxa in ", n, " : ", length(core_m))) # print core taxa identified in each DiseaseState.
list_core[[n]] <- core_m # add to a list core taxa for each group.
#print(list_core)
}
print(list_core)
library(eulerr)
mycols <- c(DATA_OSO1="#d6e2e9", DATA_PEZ1="#fcf5c7")
plot(venn(list_core),
fills = mycols)
library(microbiome)
library("BiocManager")
library(qiime2R) # import data
library(phyloseq) # also the basis of data object. Data analysis and visualization
library(vegan) # some utility tools
library(data.table) # alternative to data.frame
library(dplyr) # data handling
library(tidyverse)
library(DT) ## interactive tables
library(ggplot2)
library(MicrobiotaProcess)
library(microbiome)
#install.packages("eulerr")
library(eulerr)
library(microbiome)
#devtools::install_github('microsud/microbiomeutilities')
library(microbiomeutilities)
load("Data/oso_limpio_1_familia")
load("Data/oso_limpio_1_genero")
load("Data/oso_limpio_2_familia")
load("Data/oso_limpio_2_genero")
load("Data/pez_limpio_1_familia")
load("Data/pez_limpio_1_genero")
# Adicion de una columna:
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
#sample_data(oso_limpio_F_2)$nuevacol<-"DATA_OSO2"
sample_data(oso_limpio_G_1)$nuevacol<-"DATA_OSO1"
#sample_data(oso_limpio_G_2)$nuevacol<-"DATA_OSO2"
sample_data(pez_limpio_F_1)$nuevacol<-"DATA_PEZ1"
sample_data(pez_limpio_G_1)$nuevacol<-"DATA_PEZ2"
#OSOS
View(sample_data(oso_limpio_F_1))
sample_data(intento1)
x1
x1<- tax_glom(intento1, taxrank="Family", NArm=TRUE, bad_empty=c(NA, "", " ", "\t"))
x1
save(x1, file="Data/x1")
load("Data/x1")
library(microbiome)
library("BiocManager")
library(qiime2R) # import data
library(phyloseq) # also the basis of data object. Data analysis and visualization
library(vegan) # some utility tools
library(data.table) # alternative to data.frame
library(dplyr) # data handling
library(tidyverse)
library(DT) ## interactive tables
library(ggplot2)
library(MicrobiotaProcess)
library(microbiome)
#install.packages("eulerr")
library(eulerr)
library(microbiome)
#devtools::install_github('microsud/microbiomeutilities')
library(microbiomeutilities)
load("Data/oso_limpio_1_familia")
load("Data/oso_limpio_1_genero")
load("Data/oso_limpio_2_familia")
load("Data/oso_limpio_2_genero")
load("Data/pez_limpio_1_familia")
load("Data/pez_limpio_1_genero")
# Adicion de una columna:
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
#sample_data(oso_limpio_F_2)$nuevacol<-"DATA_OSO2"
sample_data(oso_limpio_G_1)$nuevacol<-"DATA_OSO1"
#sample_data(oso_limpio_G_2)$nuevacol<-"DATA_OSO2"
sample_data(pez_limpio_F_1)$nuevacol<-"DATA_PEZ1"
sample_data(pez_limpio_G_1)$nuevacol<-"DATA_PEZ2"
# Para juntar los phyloseq de ambas bases de familias:
intento1<-merge_phyloseq(oso_limpio_F_1, pez_limpio_F_1)
sample_data(intento1)
load("Data/x1")
sample_data(x1)
pseq.rel <- microbiome::transform(x1, "compositional")
disease_states <- unique(as.character(meta(pseq.rel)$nuevacol))
print(disease_states)
list_core <- c() # an empty object to store information
# Para juntar los phyloseq de ambas bases de familias:
intento1<-merge_phyloseq(oso_limpio_F_1, pez_limpio_F_1)
sample_data(intento1)
intento1
load("Data/x1")
sample_data(x1)
list_core <- c() # an empty object to store information
for (n in disease_states){ # for each variable n in DiseaseState
#print(paste0("Identifying Core Taxa for ", n))
ps.sub <- subset_samples(pseq.rel, nuevacol == n) # Choose sample from DiseaseState by n
core_m <- core_members(ps.sub, # ps.sub is phyloseq selected with only samples from g
detection = 0.001, # 0.001 in atleast 90% samples
prevalence = 0.00,
include.lowest = FALSE)
print(paste0("No. of core taxa in ", n, " : ", length(core_m))) # print core taxa identified in each DiseaseState.
list_core[[n]] <- core_m # add to a list core taxa for each group.
#print(list_core)
}
print(list_core)
library(eulerr)
mycols <- c(DATA_OSO1="#d6e2e9", DATA_PEZ1="#fcf5c7")
plot(venn(list_core),
fills = mycols)
# Adicion de una columna:
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
#sample_data(oso_limpio_F_2)$nuevacol<-"DATA_OSO2"
sample_data(oso_limpio_G_1)$nuevacol<-"DATA_OSO1"
#sample_data(oso_limpio_G_2)$nuevacol<-"DATA_OSO2"
sample_data(pez_limpio_F_1)$nuevacol<-"DATA_PEZ1"
sample_data(pez_limpio_G_1)$nuevacol<-"DATA_PEZ2"
load("Data/oso_limpio_1_familia")
load("Data/oso_limpio_1_genero")
#load("Data/oso_limpio_2_familia")
#load("Data/oso_limpio_2_genero")
load("Data/pez_limpio_1_familia")
load("Data/pez_limpio_1_genero")
# Adicion de una columna:
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
#sample_data(oso_limpio_F_2)$nuevacol<-"DATA_OSO2"
sample_data(oso_limpio_G_1)$nuevacol<-"DATA_OSO1"
#sample_data(oso_limpio_G_2)$nuevacol<-"DATA_OSO2"
sample_data(pez_limpio_F_1)$nuevacol<-"DATA_PEZ1"
sample_data(pez_limpio_G_1)$nuevacol<-"DATA_PEZ2"
#OSOS
View(sample_data(oso_limpio_F_1))
sample_data(oso_limpio_G_1)
sample_data(pez_limpio_F_1)
sample_data(pez_limpio_G_1)
intento1
sample_data(intento1)
x1
#save(x1, file="Data/x1")
load("Data/x1")
sample_data(x1)
View(sample_data(x1))
View(sample_data(intento1))
x1<- tax_glom(intento1, taxrank="Family", NArm=TRUE, bad_empty=c(NA, "", " ", "\t"))
x1
#save(x1, file="Data/x1")
load("Data/x1")
View(sample_data(x1))
load("Data/oso_limpio_1_familia")
load("Data/oso_limpio_1_genero")
#load("Data/oso_limpio_2_familia")
#load("Data/oso_limpio_2_genero")
load("Data/pez_limpio_1_familia")
load("Data/pez_limpio_1_genero")
oso_limpio_F_1
# Adicion de una columna:
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
#sample_data(oso_limpio_F_2)$nuevacol<-"DATA_OSO2"
sample_data(oso_limpio_G_1)$nuevacol<-"DATA_OSO1"
#sample_data(oso_limpio_G_2)$nuevacol<-"DATA_OSO2"
sample_data(pez_limpio_F_1)$nuevacol<-"DATA_PEZ1"
sample_data(pez_limpio_G_1)$nuevacol<-"DATA_PEZ2"
(sample_data(oso_limpio_F_1)
#OSOS
View(sample_data(oso_limpio_F_1))
#OSOS
View(sample_data(oso_limpio_F_1))
sample_data(oso_limpio_F_1)
sample_data(oso_limpio_G_1)
sample_data(pez_limpio_F_1)
sample_data(pez_limpio_G_1)
# Para juntar los phyloseq de ambas bases de familias:
intento1<-merge_phyloseq(oso_limpio_F_1, pez_limpio_F_1)
View(sample_data(intento1))
sample_data(intento1)
# Para juntar los phyloseq de ambas bases de familias:
base_juntas<-merge_phyloseq(oso_limpio_F_1, pez_limpio_F_1)
View(sample_data(base_juntas))
sample_data(base_juntas)
taxas_juntas<- tax_glom(base_juntas, taxrank="Family", NArm=TRUE, bad_empty=c(NA, "", " ", "\t"))
taxas_juntas
View(sample_data(taxas_juntas))
save(taxas_juntas, file="Data/taxas_juntas")
load("Data/x1")
sample_data(taxas_juntas)
View(sample_data(taxas_juntas))
load("Data/taxas_juntas")
View(sample_data(taxas_juntas))
pseq.rel <- microbiome::transform(taxas_juntas, "compositional")
disease_states <- unique(as.character(meta(pseq.rel)$nuevacol))
print(disease_states)
list_core <- c() # an empty object to store information
for (n in disease_states){ # for each variable n in DiseaseState
#print(paste0("Identifying Core Taxa for ", n))
ps.sub <- subset_samples(pseq.rel, nuevacol == n) # Choose sample from DiseaseState by n
core_m <- core_members(ps.sub, # ps.sub is phyloseq selected with only samples from g
detection = 0.001, # 0.001 in atleast 90% samples
prevalence = 0.00,
include.lowest = FALSE)
print(paste0("No. of core taxa in ", n, " : ", length(core_m))) # print core taxa identified in each DiseaseState.
list_core[[n]] <- core_m # add to a list core taxa for each group.
#print(list_core)
}
print(list_core)
library(eulerr)
mycols <- c(DATA_OSO1="#d6e2e9", DATA_PEZ1="#fcf5c7")
plot(venn(list_core),
fills = mycols)
# Para juntar los phyloseq de ambas bases de familias:
base_juntas_g<-merge_phyloseq(oso_limpio_G_1, pez_limpio_G_1)
View(sample_data(base_juntas_g))
taxas_juntas_g<- tax_glom(base_juntas_g, taxrank="Family", NArm=TRUE, bad_empty=c(NA, "", " ", "\t"))
taxas_juntas_g
save(taxas_juntas_g, file="Data/taxas_juntas_g")
load("Data/taxas_juntas_g")
View(sample_data(taxas_juntas_g))
pseq.rel_g <- microbiome::transform(taxas_juntas_g, "compositional")
disease_states_g <- unique(as.character(meta(pseq.rel_g)$nuevacol))
print(disease_states_g)
list_core_g <- c() # an empty object to store information
for (n in disease_states_g){ # for each variable n in DiseaseState
#print(paste0("Identifying Core Taxa for ", n))
ps.sub_g <- subset_samples(pseq.rel_g, nuevacol == n) # Choose sample from DiseaseState by n
core_m_g <- core_members(ps.sub_g, # ps.sub is phyloseq selected with only samples from g
detection = 0.001, # 0.001 in atleast 90% samples
prevalence = 0.00,
include.lowest = FALSE)
print(paste0("No. of core taxa in ", n, " : ", length(core_m))) # print core taxa identified in each DiseaseState.
list_core_g[[n]] <- core_m_g # add to a list core taxa for each group.
#print(list_core)
}
print(list_core_g)
library(eulerr)
mycols_g <- c(DATA_OSO1="#d6e2e9", DATA_PEZ1="#fcf5c7")
plot(venn(list_core_g),
fills = mycols_g)
taxas_juntas_g<- tax_glom(base_juntas_g, taxrank="Genus", NArm=TRUE, bad_empty=c(NA, "", " ", "\t"))
taxas_juntas_g
save(taxas_juntas_g, file="Data/taxas_juntas_g")
load("Data/taxas_juntas_g")
View(sample_data(taxas_juntas_g))
pseq.rel_g <- microbiome::transform(taxas_juntas_g, "compositional")
disease_states_g <- unique(as.character(meta(pseq.rel_g)$nuevacol))
print(disease_states_g)
sample_data(oso_limpio_G_1)
pez_limpio_F_1)
sample_data(pez_limpio_F_1)
sample_data(pez_limpio_G_1)
sample_data(pez_limpio_G_1)$nuevacol<-"DATA_PEZ1"
sample_data(pez_limpio_G_1)
# Para juntar los phyloseq de ambas bases de familias:
base_juntas<-merge_phyloseq(oso_limpio_F_1, pez_limpio_F_1)
View(sample_data(base_juntas))
taxas_juntas<- tax_glom(base_juntas, taxrank="Family", NArm=TRUE, bad_empty=c(NA, "", " ", "\t"))
taxas_juntas
save(taxas_juntas, file="Data/taxas_juntas")
load("Data/taxas_juntas")
pseq.rel <- microbiome::transform(taxas_juntas, "compositional")
disease_states <- unique(as.character(meta(pseq.rel)$nuevacol))
print(disease_states)
