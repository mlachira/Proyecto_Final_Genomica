#Libreria phyloseq
library(phyloseq)
library(MGnifyR)
#Base de datos microbioma de osos
mgclnt <- mgnify_client(usecache = T, cache_dir = '/tmp/MGnify_cache')
accession_list <- mgnify_analyses_from_studies(mgclnt, "MGYS00003951", usecache = T)
meta_dataframe <- mgnify_get_analyses_metadata(mgclnt, accession_list, usecache = T )
oso <- mgnify_get_analyses_phyloseq(mgclnt, meta_dataframe$analysis_accession, usecache = T)
oso
#Para limpiar la base
oso_limpio <- subset_taxa(oso, !(Genus %in% "NA"))
oso_limpio
save(oso_limpio, file = "Data/oso_limpio_genero")
View(oso_limpio)
oso_limpio <- subset_taxa(oso, !(Family %in% "NA"))
oso_limpio_F <- subset_taxa(oso, !(Family %in% "NA"))
oso_limpio_F
otu_table(oso_limpio)
sample_data(oso_limpio)
tax_table(oso_limpio)
View(tax_table(oso_limpio))
oso_limpio_F <- subset_taxa(oso, !(Family %in% c("NA")))
View(tax_table(oso_limpio_F))
oso_limpio_F <- subset_taxa(oso, !(Family %in% c(NA)))
View(tax_table(oso_limpio_F))
#Para limpiar la base
oso_limpio_G <- subset_taxa(oso, !(Genus %in% NA))
oso_limpio_G
View(tax_table(oso_limpio_G))
save(oso_limpio_G, file = "Data/oso_limpio_familia")
save(oso_limpio_G, file = "Data/oso_limpio_genero")
#Base de datos microbioma peces
mgclnt <- mgnify_client(usecache = T, cache_dir = '/tmp/MGnify_cache')
accession_list <- mgnify_analyses_from_studies(mgclnt, "MGYS00003748", usecache = T)
meta_dataframe <- mgnify_get_analyses_metadata(mgclnt, accession_list, usecache = T )
peces <- mgnify_get_analyses_phyloseq(mgclnt, meta_dataframe$analysis_accession, usecache = T)
peces
#Para limpiar la base
pez_limpio_G <- subset_taxa(peces, !(Genus %in% c(NA)))
pez_limpio_G
save(pez_limpio_G, file= "Data/pes_limpio_G")
save(pez_limpio_G, file= "Data/pez_limpio_G")
save(pez_limpio_G, file= "Data/pez_limpio_genero")
View(tax_table(pez_limpio_G))
#Limpio la base boorando aquelas muestras que tengan NA en Familia
pez_limpio_F <- subset_taxa(peces, !(Family %in% c(NA)))
pez_limpio_F
save(pez_limpio_F, file= "Data/pez_limpio_familia")
View(tax_table(pez_limpio_F))
#En MGnify se encontro una base de datos sobre "Microbioma intestinal de osos en hibernación"
#Las muestras se recolectaron del colón 17 osos negros (Ursus americanus) en hibernación en Minessota, EUA.
#Se identificaron las bacterias presentes en la microbioma utilizando 16S aplicon data
#https://www.ebi.ac.uk/metagenomics/studies/MGYS00003951#overview
#Study MGYS00003951
mgclnt <- mgnify_client(usecache = T, cache_dir = '/tmp/MGnify_cache')
accession_list <- mgnify_analyses_from_studies(mgclnt, "MGYS00003951", usecache = T)
meta_dataframe <- mgnify_get_analyses_metadata(mgclnt, accession_list, usecache = T )
oso_limpio@sam_data
#En MGnify se encontro una base de datos sobre "Microbioma intestinal de osos en hibernación"
#Las muestras se recolectaron del colón 17 osos negros (Ursus americanus) en hibernación en Minessota, EUA.
#Se identificaron las bacterias presentes en la microbioma utilizando 16S aplicon data
#https://www.ebi.ac.uk/metagenomics/studies/MGYS00003951#overview
#Study MGYS00003951
mgclnt <- mgnify_client(usecache = T, cache_dir = '/tmp/MGnify_cache')
accession_list <- mgnify_analyses_from_studies(mgclnt, "MGYS00003951", usecache = T)
meta_dataframe <- mgnify_get_analyses_metadata(mgclnt, accession_list, usecache = T )
oso <- mgnify_get_analyses_phyloseq(mgclnt, meta_dataframe$analysis_accession, usecache = T)
#Borramos de la base de datos aquellos que en Familia tengan NA
oso_limpio_F <- subset_taxa(oso, !(Genus %in% c(NA)))
oso_limpio_F
#Con la función view me permite ver las muestras y si nivel taxonomico
View(tax_table(oso_limpio_F))
#Con save creamos un objeto llamado oso_limpio_familia para que así otras puedan cargar la base de datos sin la necesidad de hacer todo lo anterior, solo con la función load y nombre del objeto
save(oso_limpio_F, file="Data/oso_limpio_familia")
#Al tener el analisis de phyloseq de la base de datos de oso nos dimos cuenta que tiene varias NA en genero y había menos en familia, por lo que se creo un objeto de cada uno
#Borramos de la base de datos aquellos que en Familia tengan NA
oso_limpio_F_1 <- subset_taxa(oso, !(Family %in% c(NA)))
oso_limpio_F_1
#Con la función view me permite ver las muestras y si nivel taxonomico
View(tax_table(oso_limpio_F_1))
#Con save creamos un objeto llamado oso_limpio_familia para que así otras puedan cargar la base de datos sin la necesidad de hacer todo lo anterior, solo con la función load y nombre del objeto
save(oso_limpio_F_1, file="Data/oso_limpio_1_familia")
#Borramos de la base de datos aquellos que en Genero tengan NA
oso_limpio_G_1 <- subset_taxa(oso, !(Genus %in% c(NA)))
oso_limpio_G_1
#Con la función view me permite ver las muestras y si nivel taxonomico
View(tax_table(oso_limpio_G_1))
#Con save creamos un objeto llamado oso_limpio_familia para que así otras puedan cargar la base de datos sin la necesidad de hacer todo lo anterior, solo con la función load y nombre del objeto
save(oso_limpio_G_1, file="Data/oso_limpio_1_genero")
#En MGnify se encontro una base de datos de ""
#
#
#
mgclnt <- mgnify_client(usecache = T, cache_dir = '/tmp/MGnify_cache')
accession_list <- mgnify_analyses_from_studies(mgclnt, "MGYS00003748", usecache = T)
meta_dataframe <- mgnify_get_analyses_metadata(mgclnt, accession_list, usecache = T )
peces <- mgnify_get_analyses_phyloseq(mgclnt, meta_dataframe$analysis_accession, usecache = T)
peces
#Al tener el analisis de phyloseq de la base de datos de peces nos dimos cuenta que tiene varias NA en genero y había menos en familia, por lo que se creo un objeto de cada uno
#Borramos de la base de datos aquellos que en Familia tengan NA
pez_limpio_F_1 <- subset_taxa(peces, !(Family %in% c(NA)))
pez_limpio_F_1
View(tax_table(pez_limpio_F_1))
#Con save creamos un objeto llamado oso_limpio_familia para que así otras puedan cargar la base de datos sin la necesidad de hacer todo lo anterior, solo con la función load y nombre del objeto
save(pez_limpio_F_1, file="Data/pez_limpio_1_familia")
#Borramos de la base de datos aquellos que en Genero tengan NA
pez_limpio_G_1 <- subset_taxa(peces, !(Genus %in% c(NA)))
pez_limpio_G_1
#Con la función view me permite ver las muestras y si nivel taxonomico
View(tax_table(pez_limpio_G_1))
#Con save creamos un objeto llamado oso_limpio_familia para que así otras puedan cargar la base de datos sin la necesidad de hacer todo lo anterior, solo con la función load y nombre del objeto
save(pez_limpio_G_1, file="Data/pez_limpio_1_genero")
#####
otu_table(peces)
library(zen4R)
getwd()
# Base de osos negros:
download_zenodo("10.5281/zenodo.4060480", path = "Data/oso_cafe_zenodo/")
# Base de osos negros:
download_zenodo("10.5281/zenodo.4060480", path = "Data/oso_cafe_zenodo/")
# Base de osos cafes:
osos_cafe <- download_zenodo("10.5281/zenodo.5759055", path = "Data/oso_cafe_zenodo/")
# Para leer los archivos tsv descargados:
metadata1 <- read_tsv("brownbearmeta.tsv")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(microbiome)
library(phyloseq) # also the basis of data object. Data analysis and visualization
library(vegan) # some utility tools
library(data.table) # alternative to data.frame
library(dplyr) # data handling
library(tidyverse)
library(ggplot2)
library(Rmisc)## graphing
# Para leer los archivos tsv descargados:
metadata1 <- read_tsv("Data/oso_cafe_zenodo/brownbearmeta.tsv")
# Para importar el tsv con datos que nos interesan:
install.packages("readr")
# Para importar el tsv con datos que nos interesan:
#install.packages("readr")
library(readr)
# Para leer los archivos tsv descargados:
metadata1 <- read_tsv("Data/oso_cafe_zenodo/brownbearmeta.tsv")
metadata2 <- read_tsv("Data/oso_cafe_zenodo/metadata.tsv")
head(metadata2) # aqui solo se ven las primeras 10 lineas del objeto
metadata<-full_join(metadata1, metadata2)
head(metadata)
remotes::install_github("jbisanz/qiime2R")
library(qiime2R) # import data
# Para leer los archivos qza:
SVs<-read_qza("clean-brownbear-table-unassigned_Unknown_Arch-rm.qza")
# Para leer los archivos qza:
SVs<-read_qza("Data/oso_cafe_zenodo/clean-brownbear-table-unassigned_Unknown_Arch-rm.qza")
head(SVs)
taxonomy<-read_qza("Data/oso_cafe_zenodo/brownbear-taxonomy_renamed.qza")
taxtable<-taxonomy$data %>% as_tibble() %>% separate(Taxon, sep=";", c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
taxtable<-taxonomy$data %>% as_tibble() %>% separate(Taxon, sep=";", c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")) #convert the table into a tabular split version
tree<-read_qza("Data/oso_cafe_zenodo/filter-rooted-brownbear-tree.qza")
metadata$`Body Fat`<- cut(metadata$`Body Fat (%)`,3)
metadata$NetBodyMass<-cut(metadata$NetBodyMasskgs,3)
metadata$`Fat Mass`<-cut(metadata$`Fat Mass (kg)`,3)
metadata$`Lean Mass`<-cut(metadata$`Lean Mass (kg)`,3)
# Crear un objeto phyloseq:
phy_obj<-phyloseq(
otu_table(SVs$data, taxa_are_rows = TRUE),
phy_tree(tree$data),
tax_table(as.data.frame(taxtable) %>% dplyr::select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()), #moving the taxonomy to the way phyloseq wants it
sample_data(metadata %>% as.data.frame() %>% column_to_rownames("SampleID")))
#Visualizar la tabla con los datos
datatable(tax_table(phy_obj))
install.packages("DT")
install.packages("DT")
library(DT) ## interactive tables
#Visualizar la tabla con los datos
datatable(tax_table(phy_obj))
phy_obj
# Crear un objeto phyloseq:
oso_cafe<-phyloseq(
otu_table(SVs$data, taxa_are_rows = TRUE),
phy_tree(tree$data),
tax_table(as.data.frame(taxtable) %>% dplyr::select(-Confidence) %>% column_to_rownames("Feature.ID") %>% as.matrix()), #moving the taxonomy to the way phyloseq wants it
sample_data(metadata %>% as.data.frame() %>% column_to_rownames("SampleID")))
#Visualizar la tabla con los datos
datatable(tax_table(oso_cafe))
#Nuestro objeto phyloseq con la base de datos de zenodo se llama:
oso_cafe
View(oso_cafe)
#Con la funcion view me permite ver las muestras y si nivel taxonomico
View(tax_table(oso_cafe))
#Con save creamos un objeto llamado oso_cafe_limpio para que asi otras puedan cargar la base de datos sin la necesidad de hacer todo lo anterior, solo con la funcionload y nombre del objeto
save(oso_cafe, file="Data/oso_cafe_limpio")
# Prueba de cargar las bases de datos con load:
load("Data/oso_limpio_1_familia")
load("Data/oso_limpio_1_genero")
load("Data/pez_limpio_1_familia")
load("Data/pez_limpio_1_genero")
library(data.table) # alternative to data.frame
library(dplyr) # data handling
library(Rmisc)## graphing
