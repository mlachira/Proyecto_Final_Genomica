# Se descarga zen4R y se carga:
install.packages("zen4R")
library(zen4R)
# Base de osos negros:
download_zenodo("10.5281/zenodo.4060480", path = "")
# Base de osos cafes:
osos_cafe <- download_zenodo("10.5281/zenodo.5759055", path = "")
packageVersion(qiime2R)
library(qiime2R) # import data
## data analysis
install.packages("remotes")
install.packages("remotes")
remotes::install_github("jbisanz/qiime2R")
library("remotes")
# Se descarga zen4R y se carga:
install.packages("zen4R")
library(zen4R)
# Base de osos negros:
download_zenodo("10.5281/zenodo.4060480", path = "")
# Base de osos cafes:
osos_cafe <- download_zenodo("10.5281/zenodo.5759055", path = "")
packageVersion(qiime2R)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("microbiome")
library(microbiome)
library("remotes")
library(qiime2R) # import data
library(phyloseq) # also the basis of data object. Data analysis and visualization
library(vegan) # some utility tools
library(data.table) # alternative to data.frame
library(dplyr) # data handling
library(tidyverse)
library(DT) ## interactive tables
library(ggpubr) ## plotting
library(ggplot2)
devtools::install_github("leffj/mctoolsr")
library(microbiome)
library("BiocManager")
# Para leer los archivos tsv descargados:
metadata1 <- read_tsv("brownbearmeta.tsv")
# Base de osos cafes:
osos_cafe <- download_zenodo("10.5281/zenodo.5759055", path = "")
#Cargamos la libreria ya previamente descargada "phyloseq"
#Si no se tiene descargado "phyloseq" se puede descargar con el siguiente codigo
#if (!require("BiocManager", tranquilamente = VERDADERO))
#install.packages("BiocManager")
#BiocManager::install("phyloseq")
#Phyloseq nos va a permitir importar, almacenar, analizar y mostrar gráficamente datos de secuenciación filogenéticos complejos que ya se han agrupado en unidades taxonómicas operativas (OTU).
library(phyloseq)
#MGnifyR sirve para buscar y recuperar datos del recurso Metagenomica de EBI.
#Cargamos la libreria "MGnifyR"
library(MGnifyR)
oso_limpio_F_1
# Prueba de cargar las bases de datos con load:
load("Data/oso_limpio_1_familia")
# Prueba de cargar las bases de datos con load:
pwd()
# Prueba de cargar las bases de datos con load:
gwd()
# Prueba de cargar las bases de datos con load:
getwd()
setwd("C:/Users/Luis Diego/Documents/Proyecto_Final_Genomica")
load("Data/oso_limpio_1_familia")
oso_limpio_F_1
sample_data(oso_limpio_F_1)
sample(oso_limpio_F_1, 20, replace = F)
sample(oso_limpio_F_1, 20, replace = T)
sample_oso <- function(oso_limpio_F_1, FUN = sample){
ids <- sample_names(oso_limpio_F_1)
sampled_ids <- FUN(ids, ...)
oso_limpio_F_1 <- prune_samples(sampled_ids, oso_limpio_F_1)
return(oso_limpio_F_1)
}
sample_ps(oso_limpio_F_1, size=10)
sample_oso <- function(oso_limpio_F_1, FUN = sample){
ids <- sample_names(oso_limpio_F_1)
sampled_ids <- FUN(ids, ...)
oso_limpio_F_1 <- prune_samples(sampled_ids, oso_limpio_F_1)
return(oso_limpio_F_1)
}
sample_oso(oso_limpio_F_1, size=10)
sample_oso <- function(oso_limpio_F_1, FUN = sample,...){
ids <- sample_names(oso_limpio_F_1)
sampled_ids <- FUN(ids, ...)
oso_limpio_F_1 <- prune_samples(sampled_ids, oso_limpio_F_1)
return(oso_limpio_F_1)
}
sample_oso(oso_limpio_F_1, size=10)
oso_corto_F_1<- sample_oso(oso_limpio_F_1, size=10)
oso_corto_F_1
load("Data/oso_limpio_1_genero")
oso_corto_G_1<- sample_oso(oso_limpio_G_1, size=10)
oso_corto_G_1
#Encontre esta función para hacer más chiquito nuestro objeto phyloseq
sample_oso <- function(data= , FUN = sample,...){
#Encontre esta función para hacer más chiquito nuestro objeto phyloseq
sample_oso <- function(oso_limpio_F_1, FUN = sample,...){
ids <- sample_names(oso_limpio_F_1)
sampled_ids <- FUN(ids, ...)
oso_limpio_F_1 <- prune_samples(sampled_ids, oso_limpio_F_1)
return(oso_limpio_F_1)
}
oso_corto_F_1<- sample_oso(oso_limpio_F_1, size=10)
oso_corto_F_1
sample_oso <- function(oso_limpio_G_1, FUN = sample,...){
ids <- sample_names(oso_limpio_G_1)
sampled_ids <- FUN(ids, ...)
oso_limpio_G_1 <- prune_samples(sampled_ids, oso_limpio_G_1)
return(oso_limpio_G_1)
}
oso_corto_G_1<- sample_oso(oso_limpio_G_1, size=10)
oso_corto_G_1
sample_oso_1 <- function(oso_limpio_G_1, FUN = sample,...){
ids <- sample_names(oso_limpio_G_1)
sampled_ids <- FUN(ids, ...)
oso_limpio_G_1 <- prune_samples(sampled_ids, oso_limpio_G_1)
return(oso_limpio_G_1)
}
oso_corto_G_1<- sample_oso_1(oso_limpio_G_1, size=10)
oso_corto_G_1
load("Data/pez_limpio_1_familia")
sample_pez <- function(pez_limpio_F_1, FUN = sample,...){
ids <- sample_names(pez_limpio_F_1)
sampled_ids <- FUN(ids, ...)
oso_limpio_F_1 <- prune_samples(sampled_ids, pez_limpio_F_1)
return(pez_limpio_F_1)
}
pez_corto_F_1<- sample_pez(pez_limpio_F_1, size=10)
pez_corto_F_1
load("Data/pez_limpio_1_familia")
sample_pez <- function(pez_limpio_F_1, FUN = sample,...){
ids <- sample_names(pez_limpio_F_1)
sampled_ids <- FUN(ids, ...)
PEZ_limpio_F_1 <- prune_samples(sampled_ids, pez_limpio_F_1)
return(pez_limpio_F_1)
}
pez_corto_F_1<- sample_pez(pez_limpio_F_1, size=10)
pez_corto_F_1
load("Data/pez_limpio_1_familia")
pez_limpio_F_1
sample_pezz <- function(pez_limpio_F_1, FUN = sample,...){
ids <- sample_names(pez_limpio_F_1)
sampled_ids <- FUN(ids, ...)
pez_limpio_F_1 <- prune_samples(sampled_ids, pez_limpio_F_1)
return(pez_limpio_F_1)
}
pez_corto_F_1<- sample_pezz(pez_limpio_F_1, size=10)
pez_corto_F_1
load("Data/pez_limpio_1_genero")
pez_limpio_G_1
sample_pezz_1 <- function(pez_limpio_G_1, FUN = sample,...){
ids <- sample_names(pez_limpio_G_1)
sampled_ids <- FUN(ids, ...)
pez_limpio_G_1 <- prune_samples(sampled_ids, pez_limpio_G_1)
return(pez_limpio_G_1)
}
pez_corto_G_1<- sample_pezz_1(pez_limpio_G_1, size=10)
pez_corto_G_1
load("Data/oso_limpio_1_genero")
oso_corto_G_1
sample_osoo_1 <- function(oso_limpio_G_1, FUN = sample,...){
ids <- sample_names(oso_limpio_G_1)
sampled_ids <- FUN(ids, ...)
oso_limpio_G_1 <- prune_samples(sampled_ids, oso_limpio_G_1)
return(oso_limpio_G_1)
}
oso_corto_F_1<- sample_osoo_1(oso_limpio_G_1, size=10)
oso_corto_F_1
load("Data/oso_cafe_limpio")
load("Data/oso_limpio_2_familia")
load("Data/oso_limpio_2_genero")
oso_limpio_F_2
sample_oso_2 <- function(oso_limpio_F_2, FUN = sample,...){
ids <- sample_names(oso_limpio_F_2)
sampled_ids <- FUN(ids, ...)
oso_limpio_F_2 <- prune_samples(sampled_ids, oso_limpio_F_2)
return(oso_limpio_F_2)
}
oso_corto_F_2<- sample_oso_2(oso_limpio_F_2, size=10)
oso_corto_F_2
oso_limpio_G_2
sample_osoo_1 <- function(oso_limpio_G_1, FUN = sample,...){
ids <- sample_names(oso_limpio_G_1)
sampled_ids <- FUN(ids, ...)
oso_limpio_G_1 <- prune_samples(sampled_ids, oso_limpio_G_1)
return(oso_limpio_G_1)
}
oso_corto_G_1<- sample_osoo_1(oso_limpio_G_1, size=10)
oso_corto_G_1
sample_osoo_2 <- function(oso_limpio_G_2, FUN = sample,...){
ids <- sample_names(oso_limpio_G_2)
sampled_ids <- FUN(ids, ...)
oso_limpio_G_2 <- prune_samples(sampled_ids, oso_limpio_G_2)
return(oso_limpio_G_2)
}
oso_corto_G_2<- sample_osoo_2(oso_limpio_G_2, size=10)
oso_corto_G_2
oso_limpio_F_1
oso_limpio_G_1
oso_corto_F_1
oso_corto_G_1
pez_limpio_F_1
pez_corto_F_1
pez_limpio_G_1
pez_corto_G_1<- sample_pezz_1(pez_limpio_G_1, size=10)
pez_corto_G_1
oso_limpio_F_2
oso_corto_F_2
oso_limpio_G_2
save(oso_corto_G_2,file = "Data/oso_corto_G_2")
save(oso_corto_F_2, file = "Data/oso_corto_F_2")
save(pez_corto_G_1, file = "Data/pez_corto_1")
save(pez_corto_F_1, file = "Data/pez_corto_F1")
save(oso_corto_G_1, file = "Data/oso_corto_G_1")
save(oso_corto_F_1, file = "Data/oso_corto_F2")
save(oso_corto_F_1, file = "Data/oso_corto_F_1")
load("Data/oso_corto_G_1")
load("Data/oso_corto_F_2")
load("Data/oso_corto_G_2")
load("Data/pez_corto_F1")
load("Data/pez_corto_1")
# Para juntar los phyloseq:
#Se juntaron los phyloseq de familia
data_familia_corto<- merge_phyloseq(oso_corto_F_1, pez_corto_F_1, oso_corto_F_2)
data_familia_corto
#Se juntaron los phyloseq de genero
data_genero_corto<- merge_phyloseq(oso_corto_G_1, pez_corto_G_1, oso_corto_G_2)
data_genero_corto
plot_bar(data_familia_corto, "Family")
plot_bar(data_familia_corto,fill= "Family")
# Adicion de una columna por base:
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
# Para cargar las "nuevas" bases de datos:
load("Data/oso_corto_F_1")
load("Data/oso_corto_G_1")
load("Data/oso_corto_F_2")
load("Data/oso_corto_G_2")
load("Data/pez_corto_F1")
load("Data/pez_corto_1")
# Adicion de una columna por base:
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
# Adicion de una columna:
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
oso_limpio_F_1
load("Data/oso_limpio_1_familia")
# Adicion de una columna:
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
sample_data(oso_limpio_F_2)$nuevacol<-"DATA_OSO2"
load("Data/oso_limpio_1_genero")
loaf("Data/oso_limpio_2_familia")
load("Data/oso_limpio_2_familia")
load("Data/oso_limpio_2_genero")
load("Data/pez_limpio_1_familia")
load("Data/pez_limpio_1_genero")
# Adicion de una columna:
sample_data(oso_limpio_F_1)$nuevacol<-"DATA_OSO1"
sample_data(oso_limpio_F_2)$nuevacol<-"DATA_OSO2"
sample_data(oso_limpio_G_1)$nuevacol<-"DATA_OSO1"
sample_data(oso_limpio_G_2)$nuevacol<-"DATA_OSO2"
sample_data(pez_limpio_F_1)$nuevacol<-"DATA_PEZ1"
sample_data(pez_corto_G_1)$nuevacol<-"DATA_PEZ2"
class(data_oso1)
oso_limpio_F_1
sample_data(oso_limpio_F_1)
oso_limpio_F_1
library(ggplot2)
library(MicrobiotaProcess)
# En taxlevel la verdad no entiendo que cambia, solo se que el maximo es de 7 y las graficas si salen bien diferentes si lo cambias
osofamilia <- get_taxadf(obj=oso_limpio_F_1, taxlevel=3, type = "others")
# The 30 most abundant taxonomy will be visualized by default (parameter `topn=30`):
plot_osofamilia <- ggbartax(obj=osofamilia) +
xlab(NULL) +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
plot_osofamilia
# En taxlevel la verdad no entiendo que cambia, solo se que el maximo es de 7 y las graficas si salen bien diferentes si lo cambias
oso1familia <- get_taxadf(obj=oso_limpio_F_1, taxlevel=7, type = "others")
# The 30 most abundant taxonomy will be visualized by default (parameter `topn=30`):
plot_oso1familia <- ggbartax(obj=oso1familia) +
xlab(NULL) +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
plot_oso1familia
# Para oso_limpio_G_1:
# En taxlevel la verdad no entiendo que cambia, solo se que el maximo es de 7 y las graficas si salen bien diferentes si lo cambias
oso1fgenero <- get_taxadf(obj=oso_limpio_G_1, taxlevel=7, type = "others")
# The 30 most abundant taxonomy will be visualized by default (parameter `topn=30`):
plot_oso1genero <- ggbartax(obj=oso1genero) +
xlab(NULL) +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
# Para oso_limpio_G_1:
# En taxlevel la verdad no entiendo que cambia, solo se que el maximo es de 7 y las graficas si salen bien diferentes si lo cambias
oso1genero <- get_taxadf(obj=oso_limpio_G_1, taxlevel=7, type = "others")
# The 30 most abundant taxonomy will be visualized by default (parameter `topn=30`):
plot_oso1genero <- ggbartax(obj=oso1genero) +
xlab(NULL) +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
plot_oso1genero
# Para oso_limpio_F_2:
# En taxlevel la verdad no entiendo que cambia, solo se que el maximo es de 7 y las graficas si salen bien diferentes si lo cambias
oso2familia <- get_taxadf(obj=oso_limpio_F_2, taxlevel=7, type = "others")
# The 30 most abundant taxonomy will be visualized by default (parameter `topn=30`):
plot_oso2familia <- ggbartax(obj=oso2famiila) +
xlab(NULL) +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
# Para oso_limpio_F_2:
# En taxlevel la verdad no entiendo que cambia, solo se que el maximo es de 7 y las graficas si salen bien diferentes si lo cambias
oso2familia <- get_taxadf(obj=oso_limpio_F_2, taxlevel=7, type = "others")
# The 30 most abundant taxonomy will be visualized by default (parameter `topn=30`):
plot_oso2familia <- ggbartax(obj=oso2famiila) +
xlab(NULL) +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
# The 30 most abundant taxonomy will be visualized by default (parameter `topn=30`):
plot_oso2familia <- ggbartax(obj=oso2familia) +
xlab(NULL) +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
plot_oso2familia
# Para oso_limpio_G_2:
# En taxlevel la verdad no entiendo que cambia, solo se que el maximo es de 7 y las graficas si salen bien diferentes si lo cambias
oso2genero <- get_taxadf(obj=oso_limpio_G_2, taxlevel=7, type = "others")
# The 30 most abundant taxonomy will be visualized by default (parameter `topn=30`):
plot_oso2genero <- ggbartax(obj=oso2genero) +
xlab(NULL) +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
plot_oso2genero
# Para pez
# En taxlevel la verdad no entiendo que cambia, solo se que el maximo es de 7 y las graficas si salen bien diferentes si lo cambias
pez1familia <- get_taxadf(obj=pez_limpio_F_1, taxlevel=7, type = "others")
# The 30 most abundant taxonomy will be visualized by default (parameter `topn=30`):
plot_pez1familia <- ggbartax(obj=pez1familia) +
xlab(NULL) +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
plot_pez1familia
# Para pez_limpio_g_1
# En taxlevel la verdad no entiendo que cambia, solo se que el maximo es de 7 y las graficas si salen bien diferentes si lo cambias
pez1genero <- get_taxadf(obj=pez_limpio_G_1, taxlevel=7, type = "others")
# The 30 most abundant taxonomy will be visualized by default (parameter `topn=30`):
plot_pez1genero <- ggbartax(obj=pez1genero) +
xlab(NULL) +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
plot_pez1genero
# Para ver las 6 graficas al mismo tiempo:
par(mfrow=c(3,2))
plot_oso1familia
plot_oso1genero
# Para ver las 6 graficas al mismo tiempo:
par(mfrow=c(3,2))
# The 30 most abundant taxonomy will be visualized by default (parameter `topn=30`):
plot_oso1familia <- ggbartax(obj=oso1familia) +
xlab(NULL) +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
plot_oso1familia
oso_limpio_F_1
# En taxlevel la verdad no entiendo que cambia, solo se que el maximo es de 7 y las graficas si salen bien diferentes si lo cambias
oso1familia <- get_taxadf(obj=oso_limpio_F_1, taxlevel=7, type = "Family")
# The 30 most abundant taxonomy will be visualized by default (parameter `topn=30`):
plot_oso1familia <- ggbartax(obj=oso1familia) +
xlab(NULL) +
ylab("relative abundance (%)") +
scale_fill_manual(values=c(colorRampPalette(RColorBrewer::brewer.pal(12,"Set3"))(31))) +
guides(fill= guide_legend(keywidth = 0.5, keyheight = 0.5))
plot_oso1familia
dd <- datadist(oso_limpio_F_1)
oso1_F_ayuda <- as.data.frame(oso_limpio_F_1)
rarecurve(t(otu_table(oso_limpio_F_1)), step=50, cex=0.5)
library(MicrobiotaProcess)
library(ggplot2)
# Para importar el tsv con datos que nos interesan:
#install.packages("readr")
library(readr)
#install.packages("DT")
library(DT) ## interactive tables
## data analysis
library(qiime2R) # import data
library(phyloseq) # also the basis of data object. Data analysis and visualization
library(vegan) # some utility tools
library(data.table) # alternative to data.frame
library(dplyr) # data handling
#install.packages("tidyverse")
library(tidyverse)
# Se descarga zen4R y se carga:
#install.packages("zen4R")
library(zen4R)
#MGnifyR sirve para buscar y recuperar datos del recurso Metagenomica de EBI.
#Cargamos la libreria "MGnifyR"
library(MGnifyR)
rarecurve(t(otu_table(oso_limpio_F_1)), step=50, cex=0.5)
oso_limpio_F_1
rcurve(oso_limpio_F_1, subsamp = 10^c(1:5), trim = TRUE, add_sample_data = TRUE)
library(patchwork)
library(patchwork)
rcurve(oso_limpio_F_1, subsamp = 10^c(1:5), trim = TRUE, add_sample_data = TRUE)
rarecurve(t(otu_table(oso_limpio_F_1)), step=50, cex=0.5)
set.seed(1024)
rareres <- get_rarecurve(obj=oso_limpio_F_1, chunks=400)
